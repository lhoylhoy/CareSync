@page "/medical-records"
@using CareSync.Application.DTOs.MedicalRecords
@using CareSync.Application.DTOs.Patients
@using CareSync.Application.DTOs.Doctors
@using CareSync.Web.Admin.Components
@using CareSync.Web.Admin.Forms
@using System.Linq
@inject IMedicalRecordService MedicalRecordService
@inject IPatientService PatientService
@inject IDoctorService DoctorService
@inject IToastService ToastService

<BaseCrudPage
    TDto="MedicalRecordDto"
    TCreateDto="UpsertMedicalRecordDto"
    TUpdateDto="UpsertMedicalRecordDto"
    TFormDto="MedicalRecordFormDto"
    @ref="_crudPage"
    PageTitle="Medical Records"
    PageDescription="Patient medical history and treatment records"
    PageIcon="fas fa-file-medical"
    EntityName="Medical Record"
    TableTitle="All Medical Records"
    TableIcon="fas fa-history"
    CreateButtonText="Add Medical Record"
    EmptyStateTitle="No medical records found"
    EmptyStateMessage="Start by documenting the first medical record."
    EmptyStateIcon="fas fa-notes-medical"
    DeleteItemIcon="fas fa-file-medical-times"
    CrudService="@MedicalRecordService"
    CreateNewModel="@CreateNewMedicalRecord"
    MapToUpdateModel="@MapRecordToModel"
    GetItemDisplayName="@GetMedicalRecordDisplayName"
    ConvertToCreateDto="@ConvertToUpsertDto"
    ConvertToUpdateDto="@ConvertToUpsertDto"
    AllowView="true"
    OnItemViewed="HandleRecordViewed">

    <HeaderTemplate>
        <th>Patient</th>
        <th>Doctor</th>
        <th>Record Date</th>
        <th>Chief Complaint</th>
        <th>Status</th>
    </HeaderTemplate>

    <RowTemplate Context="record">
        <td>
            <div class="d-flex align-items-center">
                <div class="avatar-circle bg-light me-3">
                    <i class="fas fa-user"></i>
                </div>
                <div>
                    <div class="fw-semibold text-primary">@record.PatientName</div>
                    <small class="text-muted">ID: @record.PatientId.ToString("N")[..8]</small>
                </div>
            </div>
        </td>
        <td>
            <div class="d-flex align-items-center">
                <i class="fas fa-user-md me-2"></i>
                <div>
                    <div class="fw-semibold">@record.DoctorName</div>
                    <small class="text-muted">Seen at @record.RecordDate.ToLocalTime().ToString("HH:mm")</small>
                </div>
            </div>
        </td>
        <td>
            <div class="fw-semibold">@record.RecordDate.ToLocalTime().ToString("MMM dd, yyyy")</div>
            <small class="text-muted">Created @record.CreatedAt.ToLocalTime().ToString("MMM dd")</small>
        </td>
        <td>
            <span class="text-truncate d-inline-block" style="max-width: 240px;" title="@record.ChiefComplaint">
                @record.ChiefComplaint
            </span>
        </td>
        <td>
            <StatusBadge Value="@GetStatusText(record)" />
        </td>
    </RowTemplate>

    <ActionsTemplate Context="record">
        <div class="btn-group btn-group-sm" role="group">
            <button class="btn btn-outline-secondary btn-sm" title="View Details" @onclick="() => HandleRecordViewed(record)">
                <i class="fas fa-eye"></i>
            </button>
            @if (!record.IsFinalized)
            {
                <button class="btn btn-outline-secondary btn-sm" title="Finalize Record" @onclick="() => PromptFinalizeAsync(record)">
                    <i class="fas fa-lock"></i>
                </button>
            }
            else
            {
                <button class="btn btn-outline-secondary btn-sm" title="Reopen Record" @onclick="() => PromptReopenAsync(record)">
                    <i class="fas fa-unlock"></i>
                </button>
            }
        </div>
    </ActionsTemplate>

    <FormTemplate Context="model">
        @if (model is MedicalRecordFormDto formModel)
        {
            <MedicalRecordForm Model="@formModel" Patients="@_patients" Doctors="@_doctors" />
        }
    </FormTemplate>

</BaseCrudPage>

<ConfirmationDialog @ref="_finalizeDialog"
                    DialogType="ConfirmationDialogType.Warning"
                    Title="Finalize Medical Record"
                    Subtitle="Lock further edits"
                    Message="Finalizing a record prevents additional edits. Continue?"
                    ItemIcon="fas fa-lock"
                    ItemName="@(_recordToFinalize?.ChiefComplaint ?? string.Empty)"
                    ItemType="Medical Record"
                    ConfirmText="Yes, finalize"
                    OnConfirm="ConfirmFinalizeAsync" />

<ConfirmationDialog @ref="_reopenDialog"
                    DialogType="ConfirmationDialogType.Info"
                    Title="Reopen Medical Record"
                    Subtitle="Allow further updates"
                    Message="Reopening will allow edits to this record."
                    ItemIcon="fas fa-unlock"
                    ItemName="@(_recordToReopen?.ChiefComplaint ?? string.Empty)"
                    ItemType="Medical Record"
                    ConfirmText="Yes, reopen"
                    OnConfirm="ConfirmReopenAsync" />

@if (_showRecordDetails && _recordToView is not null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-file-medical me-2"></i>Record Details
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseRecordDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <div class="text-muted small">Patient</div>
                            <div class="fw-semibold">@_recordToView.PatientName</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Doctor</div>
                            <div class="fw-semibold">@_recordToView.DoctorName</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Status</div>
                            <StatusBadge Value="@GetStatusText(_recordToView)" />
                        </div>
                    </div>

                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <div class="text-muted small">Record Date</div>
                            <div class="fw-semibold">@_recordToView.RecordDate.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Created</div>
                            <div>@_recordToView.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Last Updated</div>
                            <div>@(_recordToView.UpdatedAt?.ToLocalTime().ToString("MMM dd, yyyy HH:mm") ?? "â€”")</div>
                        </div>
                    </div>

                    <div class="record-section">
                        <h6><i class="fas fa-notes-medical me-2"></i>Chief Complaint</h6>
                        <p class="mb-3">@_recordToView.ChiefComplaint</p>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(_recordToView.HistoryOfPresentIllness))
                    {
                        <div class="record-section">
                            <h6><i class="fas fa-file-alt me-2"></i>History of Present Illness</h6>
                            <p class="mb-3">@_recordToView.HistoryOfPresentIllness</p>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(_recordToView.PhysicalExamination))
                    {
                        <div class="record-section">
                            <h6><i class="fas fa-user-md me-2"></i>Physical Examination</h6>
                            <p class="mb-3">@_recordToView.PhysicalExamination</p>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(_recordToView.Assessment))
                    {
                        <div class="record-section">
                            <h6><i class="fas fa-diagnoses me-2"></i>Assessment</h6>
                            <p class="mb-3">@_recordToView.Assessment</p>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(_recordToView.TreatmentPlan))
                    {
                        <div class="record-section">
                            <h6><i class="fas fa-clipboard-list me-2"></i>Treatment Plan</h6>
                            <p class="mb-3">@_recordToView.TreatmentPlan</p>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(_recordToView.Notes))
                    {
                        <div class="record-section">
                            <h6><i class="fas fa-sticky-note me-2"></i>Notes</h6>
                            <pre class="bg-light p-3 rounded">@_recordToView.Notes</pre>
                        </div>
                    }

                    @if (_recordToView.VitalSigns?.Any() == true)
                    {
                        <div class="record-section">
                            <h6><i class="fas fa-heartbeat me-2"></i>Vital Signs</h6>
                            <div class="row g-3">
                                @foreach (var vital in _recordToView.VitalSigns)
                                {
                                    <div class="col-md-6">
                                        <div class="card shadow-sm border-0">
                                            <div class="card-body">
                                                <div class="small text-muted">@vital.MeasurementDate.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</div>
                                                <div class="d-flex flex-wrap gap-3 mt-2">
                                                    @if (vital.Temperature.HasValue)
                                                    {
                                                        <span><strong>Temp:</strong> @vital.TemperatureÂ°C</span>
                                                    }
                                                    @if (vital.SystolicBp.HasValue && vital.DiastolicBp.HasValue)
                                                    {
                                                        <span><strong>BP:</strong> @vital.SystolicBp/@vital.DiastolicBp</span>
                                                    }
                                                    @if (vital.HeartRate.HasValue)
                                                    {
                                                        <span><strong>HR:</strong> @vital.HeartRate bpm</span>
                                                    }
                                                    @if (vital.RespiratoryRate.HasValue)
                                                    {
                                                        <span><strong>RR:</strong> @vital.RespiratoryRate breaths</span>
                                                    }
                                                    @if (vital.OxygenSaturation.HasValue)
                                                    {
                                                        <span><strong>SpO2:</strong> @vital.OxygenSaturation%</span>
                                                    }
                                                </div>
                                                @if (!string.IsNullOrWhiteSpace(vital.Notes))
                                                {
                                                    <div class="mt-2 small text-muted">@vital.Notes</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    @if (_recordToView.Prescriptions?.Any() == true)
                    {
                        <div class="record-section">
                            <h6><i class="fas fa-pills me-2"></i>Prescriptions</h6>
                            <div class="list-group">
                                @foreach (var prescription in _recordToView.Prescriptions)
                                {
                                    <div class="list-group-item list-group-item-action">
                                        <div class="fw-semibold">@prescription.MedicationName</div>
                                        <div class="small text-muted">@prescription.Dosage â€¢ @prescription.Frequency</div>
                                        @if (!string.IsNullOrWhiteSpace(prescription.Instructions))
                                        {
                                            <div class="mt-1">@prescription.Instructions</div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseRecordDetails">
                        <i class="fas fa-times me-2"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .record-section + .record-section {
        border-top: 1px solid var(--bs-border-color, #e5e7eb);
        padding-top: 1rem;
        margin-top: 1rem;
    }
</style>

@code {
    private BaseCrudPage<MedicalRecordDto, UpsertMedicalRecordDto, UpsertMedicalRecordDto, MedicalRecordFormDto>? _crudPage;
    private List<PatientDto> _patients = new();
    private List<DoctorDto> _doctors = new();
    private MedicalRecordDto? _recordToFinalize;
    private MedicalRecordDto? _recordToReopen;
    private MedicalRecordDto? _recordToView;
    private ConfirmationDialog? _finalizeDialog;
    private ConfirmationDialog? _reopenDialog;
    private bool _showRecordDetails;

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupsAsync();
    }

    private async Task LoadLookupsAsync()
    {
        try
        {
            var patientTask = PatientService.GetPatientsAsync();
            var doctorTask = DoctorService.GetDoctorsAsync();
            await Task.WhenAll(patientTask, doctorTask);
            _patients = patientTask.Result ?? new List<PatientDto>();
            _doctors = doctorTask.Result ?? new List<DoctorDto>();
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to load supporting data: {ex.Message}");
        }
    }

    private MedicalRecordFormDto CreateNewMedicalRecord() => new();

    private MedicalRecordFormDto MapRecordToModel(MedicalRecordDto record) => MedicalRecordFormDto.FromDto(record);

    private UpsertMedicalRecordDto ConvertToUpsertDto(MedicalRecordFormDto form) => form.ToUpsertDto();

    private string GetMedicalRecordDisplayName(MedicalRecordDto record)
        => $"{record.PatientName} â€¢ {record.ChiefComplaint}";

    private static string GetStatusText(MedicalRecordDto record)
        => record.IsFinalized ? "Finalized" : "Draft";

    private async Task RefreshRecordsAsync()
    {
        if (_crudPage is not null)
        {
            await _crudPage.RefreshAsync();
        }
    }

    private async Task PromptFinalizeAsync(MedicalRecordDto record)
    {
        _recordToFinalize = record;
        if (_finalizeDialog != null)
        {
            await _finalizeDialog.ShowAsync();
        }
    }

    private async Task ConfirmFinalizeAsync()
    {
        if (_recordToFinalize == null)
        {
            return;
        }

        try
        {
            await MedicalRecordService.FinalizeMedicalRecordAsync(_recordToFinalize.Id, null, "Admin");
            await ToastService.ShowSuccessAsync("Medical record finalized.");
            await RefreshRecordsAsync();
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to finalize record: {ex.Message}");
        }
        finally
        {
            if (_finalizeDialog != null)
            {
                await _finalizeDialog.HideAsync();
            }

            _recordToFinalize = null;
        }
    }

    private async Task PromptReopenAsync(MedicalRecordDto record)
    {
        _recordToReopen = record;
        if (_reopenDialog != null)
        {
            await _reopenDialog.ShowAsync();
        }
    }

    private async Task ConfirmReopenAsync()
    {
        if (_recordToReopen == null)
        {
            return;
        }

        try
        {
            await MedicalRecordService.ReopenMedicalRecordAsync(_recordToReopen.Id);
            await ToastService.ShowSuccessAsync("Medical record reopened.");
            await RefreshRecordsAsync();
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to reopen record: {ex.Message}");
        }
        finally
        {
            if (_reopenDialog != null)
            {
                await _reopenDialog.HideAsync();
            }

            _recordToReopen = null;
        }
    }

    private void HandleRecordViewed(MedicalRecordDto record)
    {
        _recordToView = record;
        _showRecordDetails = true;
    }

    private void CloseRecordDetails()
    {
        _showRecordDetails = false;
        _recordToView = null;
    }
}
