@page "/doctors"
@using CareSync.Web.Admin.Components
@using CareSync.Web.Admin.Common.Filtering
@inject CareSync.Web.Admin.Services.Contracts.IDoctorService DoctorService

<BaseCrudPage TDto="DoctorDto" TCreateDto="CreateDoctorDto" TUpdateDto="UpdateDoctorDto" TFormDto="DoctorFormDto"
    PageTitle="Medical Staff" PageDescription="Manage doctors and medical personnel" PageIcon="fas fa-user-md"
    EntityName="Doctor" TableTitle="Medical Team Directory" TableIcon="fas fa-stethoscope"
    CreateButtonText="Add New Doctor" EmptyStateTitle="No doctors found"
    EmptyStateMessage="Start by adding your first doctor." EmptyStateIcon="fas fa-user-plus"
    DeleteItemIcon="fas fa-user-md" CrudService="@DoctorService" CreateNewModel="@CreateNewDoctor"
    MapToUpdateModel="@MapDoctorToUpdateModel" GetItemDisplayName="@GetDoctorDisplayName"
    ConvertToCreateDto="@ConvertToCreateDto" ConvertToUpdateDto="@ConvertToUpdateDto" UseServerFiltering="true"
    Filters="@_filters" PageSizeOptions="@_pageSizeOptions" DefaultPageSize="25"
    SearchPlaceholder="Search doctors...">

    <HeaderTemplate>
        <th>Name</th>
        <th>Specialty</th>
        <th>Email</th>
        <th>Phone</th>
        <th>Status</th>
        <th>Created</th>
    </HeaderTemplate>

    <RowTemplate Context="doctor">
        <td>
            <div class="d-flex align-items-center">
                <div class="avatar-circle bg-primary text-white me-3">
                    <i class="fas fa-user-md"></i>
                </div>
                <div>
                    <div class="fw-bold">@doctor.DisplayName</div>
                    <small class="text-muted">Dr. @doctor.LastName</small>
                </div>
            </div>
        </td>
        <td>
            <span class="cs-badge cs-badge-primary">@doctor.Specialty</span>
        </td>
        <td>@doctor.Email</td>
        <td>@doctor.PhoneNumber</td>
        <td>
            <StatusBadge Value="@(doctor.IsActive ? "Active" : "Inactive")" />
        </td>
        <td>@doctor.CreatedAt.ToString("MMM dd, yyyy")</td>
    </RowTemplate>

    <FormTemplate Context="model">
        @if (model is DoctorFormDto formModel)
        {
            <DoctorForm Model="@formModel" />
        }
    </FormTemplate>

</BaseCrudPage>

@code {
    private static readonly IReadOnlyList<int> _pageSizeOptions = new[] { 10, 25, 50 };

    private static readonly IReadOnlyList<FilterOption> _specialtyOptions = new[]
    {
        new FilterOption("General Practice", "General Practice"),
        new FilterOption("Cardiology", "Cardiology"),
        new FilterOption("Dermatology", "Dermatology"),
        new FilterOption("Pediatrics", "Pediatrics"),
        new FilterOption("Neurology", "Neurology"),
        new FilterOption("Orthopedics", "Orthopedics"),
        new FilterOption("Oncology", "Oncology"),
        new FilterOption("Gynecology", "Gynecology"),
        new FilterOption("Psychiatry", "Psychiatry"),
        new FilterOption("Radiology", "Radiology"),
        new FilterOption("Emergency Medicine", "Emergency Medicine"),
        new FilterOption("Internal Medicine", "Internal Medicine")
    };

    private static readonly IReadOnlyList<FilterDefinition> _filters = new[]
    {
        new FilterDefinition(
            key: "Specialty",
            label: "Specialty",
            options: _specialtyOptions,
            propertyName: nameof(DoctorDto.Specialty)),
        new FilterDefinition(
            key: "IsActive",
            label: "Status",
            options: new[]
            {
                new FilterOption("true", "Active"),
                new FilterOption("false", "Inactive")
            },
            propertyName: nameof(DoctorDto.IsActive))
    };

    private DoctorFormDto CreateNewDoctor() => new();

    private DoctorFormDto MapDoctorToUpdateModel(DoctorDto doctor)
    {
        return DoctorFormDto.FromDto(doctor);
    }

    private string GetDoctorDisplayName(DoctorDto doctor)
    {
        return doctor.DisplayName;
    }

    private CreateDoctorDto ConvertToCreateDto(DoctorFormDto form)
    {
        return form.ToCreateDto();
    }

    private UpdateDoctorDto ConvertToUpdateDto(DoctorFormDto form)
    {
        return form.ToUpdateDto();
    }
}
