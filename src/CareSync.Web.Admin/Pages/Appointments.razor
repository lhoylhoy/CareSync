@page "/appointments"
@inject IAppointmentService AppointmentService
@inject IPatientService PatientService
@inject IDoctorService DoctorService
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@using CareSync.Web.Admin.Shared

<PageTitle>Appointments - CareSync</PageTitle>

<div class="fade-in">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="text-primary mb-0">
                <i class="fas fa-calendar-alt me-2"></i>Appointments
            </h1>
            <p class="text-muted mb-0">Manage patient appointments and schedules</p>
        </div>
        <button class="btn btn-primary" @onclick="ShowAddAppointmentModal">
            <i class="fas fa-plus me-2"></i>Schedule New Appointment
        </button>
    </div>

    <!-- Appointments Table -->
    <div class="card">
        <div class="card-header">
            <i class="fas fa-calendar-check me-2"></i>
            All Appointments
            @if (_filteredAppointments?.Any() == true)
            {
                <span class="cs-badge cs-badge-primary ms-2">@_filteredAppointments.Count</span>
            }
        </div>
        <div class="card-body p-0">
            @if (_appointments == null || _isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner"></div>
                    <p class="mt-2 text-muted">Loading appointments...</p>
                </div>
            }
            else if (_filteredAppointments?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead>
                        <tr>
                            <th>Patient</th>
                            <th>Doctor</th>
                            <th>Date & Time</th>
                            <th>Duration</th>
                            <th>Status</th>
                            <th>Notes</th>
                            <th>Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var appointment in _filteredAppointments)
                        {
                            <tr class="@GetRowClass(appointment)">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="patient-avatar me-3">
                                            <i class="fas fa-user"></i>
                                        </div>
                                        <div>
                                            <div class="fw-bold text-primary">@appointment.PatientName</div>
                                            <small
                                                class="text-muted">ID: @appointment.PatientId.ToString("N")[..8]</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-user-md me-2 text-success"></i>
                                        <div>
                                            <div class="fw-bold">@appointment.DoctorName</div>
                                            <small class="text-muted">Attending Physician</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-bold">@appointment.StartDateTime.ToString("MMM dd, yyyy")</div>
                                        <small class="text-muted">@appointment.StartDateTime.ToString("HH:mm")</small>
                                    </div>
                                </td>
                                <td>
                                        <span class="cs-badge">
                                            @appointment.Duration.TotalMinutes min
                                        </span>
                                </td>
                                <td>
                                        <StatusBadge Value="@appointment.Status" />
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(appointment.Notes))
                                    {
                                        <span title="@appointment.Notes" class="text-truncate d-inline-block"
                                              style="max-width: 150px;">
                                                @appointment.Notes
                                            </span>
                                    }
                                    else
                                    {
                                        <small class="text-muted">No notes</small>
                                    }
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        @if (appointment.Status.ToString().ToLower() == "scheduled")
                                        {
                                            <button class="btn btn-sm btn-outline-success" title="Complete Appointment" @onclick="() => CompleteAppointment(appointment)">
                                                <i class="fas fa-check"></i>
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-outline-primary" title="Edit Appointment"
                                                @onclick="() => EditAppointment(appointment)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        @if (appointment.Status.ToString().ToLower() != "cancelled" &&
                                             appointment.Status.ToString().ToLower() != "completed")
                                        {
                                            <button class="btn btn-sm btn-outline-danger" title="Cancel Appointment"
                                                    @onclick="() => CancelAppointment(appointment)">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-outline-danger" title="Delete Appointment" @onclick="() => PromptDeleteAppointment(appointment)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

                <!-- Total count display -->
                <div class="text-muted mt-3">
                    Showing all @_totalCount appointments
                </div>
            }
            else if (_appointments != null)
            {
                <div class="text-center py-5">
                    <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No appointments found</h5>
                    <p class="text-muted">Start by scheduling your first appointment.</p>
                    <button class="btn btn-primary" @onclick="ShowAddAppointmentModal">
                        <i class="fas fa-plus me-2"></i>Schedule First Appointment
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Appointment Modal -->
<div class="modal fade appointment-modal" id="appointmentModal" tabindex="-1" aria-labelledby="appointmentModalLabel"
     aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"
                    id="appointmentModalLabel">@(_isEditing ? "Edit Appointment" : "Schedule New Appointment")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="HandleSubmit" class="row g-3">
                    <div class="col-md-6">
                        <label for="patientId" class="form-label">Patient *</label>
                        <select class="form-select" id="patientId" @bind="_appointmentModel.PatientIdString" required>
                            <option value="">Select Patient</option>
                            @if (_patients != null)
                            {
                                @foreach (var patient in _patients)
                                {
                                    <option value="@patient.Id.ToString()">@patient.DisplayName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="doctorId" class="form-label">Doctor *</label>
                        <select class="form-select" id="doctorId" @bind="_appointmentModel.DoctorIdString" required>
                            <option value="">Select Doctor</option>
                            @if (_doctors != null)
                            {
                                @foreach (var doctor in _doctors)
                                {
                                    <option value="@doctor.Id.ToString()">Dr. @doctor.DisplayName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="appointmentDateTime" class="form-label">Date & Time *</label>
               <input type="datetime-local" class="form-control" id="appointmentDateTime"
                   @bind="_appointmentModel.StartDateTime" required>
                    </div>
                    <div class="col-md-6">
                        <label for="durationMinutes" class="form-label">Duration (Minutes) *</label>
                        <input type="number" class="form-control" id="durationMinutes"
                               @bind="_appointmentModel.DurationMinutes" min="15" max="180" required>
                    </div>
                    <div class="col-md-6">
                        <label for="appointmentType" class="form-label">Appointment Type *</label>
                        <select class="form-select" id="appointmentType" @bind="_appointmentModel.AppointmentType"
                                required>
                            <option value="Consultation">Consultation</option>
                            <option value="Follow-up">Follow-up</option>
                            <option value="Check-up">Check-up</option>
                            <option value="Emergency">Emergency</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="reasonForVisit" class="form-label">Reason for Visit</label>
                        <input type="text" class="form-control" id="reasonForVisit"
                               @bind="_appointmentModel.ReasonForVisit">
                    </div>
                    <div class="col-12">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="notes" rows="3" @bind="_appointmentModel.Notes"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" @onclick="HandleSubmit" disabled="@_isSubmitting">
                    @if (_isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    @(_isEditing ? "Update Appointment" : "Schedule Appointment")
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Reusable Dialogs -->
<ConfirmationDialog @ref="cancelConfirmDialog"
                    DialogType="ConfirmationDialogType.Warning"
                    Title="Cancel Appointment"
                    Message="@($"Are you sure you want to cancel the appointment for {_appointmentToCancel?.PatientName}? This action cannot be undone.")"
                    ConfirmText="Yes, Cancel Appointment"
                    OnConfirm="ShowCancellationReasonDialog"/>

<InputDialog @ref="cancellationReasonDialog"
             Type="ConfirmationDialogType.Warning"
             Title="Cancellation Reason"
             Message="Please provide a reason for cancelling this appointment:"
             InputLabel="Reason for cancellation"
             Placeholder="e.g., Patient requested, Emergency, Schedule conflict..."
             ConfirmText="Cancel Appointment"
             OnConfirm="ConfirmCancelAppointment"/>

<ConfirmationDialog @ref="deleteConfirmDialog"
                    DialogType="ConfirmationDialogType.Danger"
                    Title="Delete Appointment"
                    Message="@UiMessages.DeleteConfirmation("appointment", _appointmentToDelete?.PatientName)"
                    ItemName="@(_appointmentToDelete?.PatientName)"
                    ItemType="Appointment"
                    ConfirmText="Yes, Delete"
                    OnConfirm="ConfirmDeleteAppointment" />

@code {
    private List<AppointmentDto>? _appointments;
    private List<AppointmentDto>? _filteredAppointments;
    private List<PatientDto>? _patients;
    private List<DoctorDto>? _doctors;
    private AppointmentFormDto _appointmentModel = new();
    private int _totalCount;
    private bool _isLoading;
    private bool _isEditing;
    private bool _isSubmitting;

    // Dialog references and appointment cancellation
    private ConfirmationDialog cancelConfirmDialog = null!;
    private InputDialog cancellationReasonDialog = null!;
    private AppointmentDto? _appointmentToCancel;
    private AppointmentDto? _appointmentToDelete;
    private ConfirmationDialog deleteConfirmDialog = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        await Task.WhenAll(
            LoadAppointments(),
            LoadPatients(),
            LoadDoctors()
        );
    }

    private async Task LoadAppointments()
    {
        _isLoading = true;
        try
        {
            _appointments = await AppointmentService.GetAppointmentsAsync();
            // For demo purposes, assume we get total count from the API response
            // In a real implementation, you'd get this from the paged response
            _totalCount = _appointments.Count; // Updated to use actual count
            ApplyFilter();
        }
        catch
        {
            _appointments = new List<AppointmentDto>();
            _filteredAppointments = new List<AppointmentDto>();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadPatients()
    {
        try
        {
            _patients = await PatientService.GetPatientsAsync();
        }
        catch
        {
            _patients = new List<PatientDto>();
        }
    }

    private async Task LoadDoctors()
    {
        try
        {
            _doctors = await DoctorService.GetDoctorsAsync();
        }
        catch
        {
            _doctors = new List<DoctorDto>();
        }
    }

    private void ApplyFilter()
    {
        if (_appointments == null)
        {
            _filteredAppointments = new List<AppointmentDto>();
            return;
        }

        // Show all appointments sorted by date
    _filteredAppointments = _appointments.OrderBy(a => a.StartDateTime).ToList();
    }

    private string GetRowClass(AppointmentDto appointment)
    {
    if (appointment.StartDateTime.Date == DateTime.Today)
            return "appointment-today";

    if (appointment.StartDateTime < DateTime.Now && appointment.Status.ToString().ToLower() == "scheduled")
            return "appointment-overdue";

        return string.Empty;
    }

    private async Task ShowAddAppointmentModal()
    {
        _isEditing = false;
        _appointmentModel = new AppointmentFormDto();
        await JsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('appointmentModal')).show()");
    }

    private async Task EditAppointment(AppointmentDto appointment)
    {
        try
        {
            _isEditing = true;
            _appointmentModel = AppointmentFormDto.FromDto(appointment);
            await JsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('appointmentModal')).show()");
        }
        catch
        {
            await ToastService.ShowErrorAsync("Failed to load appointment data. Please try again.");
        }
    }

    private async Task HandleSubmit()
    {
        if (_isSubmitting) return;

        try
        {
            _isSubmitting = true;

            var upsertDto = _appointmentModel.ToUpsertDto();
            await AppointmentService.UpsertAppointmentAsync(upsertDto);

            await ToastService.ShowSuccessAsync(_isEditing ? "Appointment updated successfully." : "Appointment scheduled successfully.");

            // Close the modal first
            await JsRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('appointmentModal')).hide()");

            // Refresh the appointments list
            await LoadAppointments();

            // Force UI update
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to save appointment: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task CancelAppointment(AppointmentDto appointment)
    {
        _appointmentToCancel = appointment;
        await cancelConfirmDialog.ShowAsync();
    }

    private async Task ShowCancellationReasonDialog()
    {
        await cancellationReasonDialog.ShowAsync();
    }

    private async Task ConfirmCancelAppointment(string reason)
    {
        if (_appointmentToCancel != null && !string.IsNullOrWhiteSpace(reason))
        {
            try
            {
                await AppointmentService.CancelAppointmentAsync(_appointmentToCancel.Id, reason);
                await LoadAppointments();
                await ToastService.ShowSuccessAsync("Appointment cancelled successfully.");
            }
            catch
            {
                await ToastService.ShowErrorAsync("Failed to cancel appointment. Please try again.");
            }
            finally
            {
                _appointmentToCancel = null;
            }
        }
    }

    private async Task CompleteAppointment(AppointmentDto appointment)
    {
        try
        {
            await AppointmentService.CompleteAppointmentAsync(appointment.Id, "Completed via UI");
            await LoadAppointments();
            await ToastService.ShowSuccessAsync("Appointment completed.");
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to complete appointment: {ex.Message}");
        }
    }

    private async Task PromptDeleteAppointment(AppointmentDto appointment)
    {
        _appointmentToDelete = appointment;
        await deleteConfirmDialog.ShowAsync();
    }

    private async Task ConfirmDeleteAppointment()
    {
        if (_appointmentToDelete == null) return;
        try
        {
            await AppointmentService.DeleteAppointmentAsync(_appointmentToDelete.Id);
            await LoadAppointments();
            await ToastService.ShowSuccessAsync(UiMessages.Deleted("Appointment"));
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to delete appointment: {ex.Message}");
        }
        finally
        {
            _appointmentToDelete = null;
        }
    }

}
