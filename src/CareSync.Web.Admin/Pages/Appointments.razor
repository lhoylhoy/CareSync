@page "/appointments"
@using CareSync.Application.DTOs.Appointments
@using CareSync.Application.DTOs.Patients
@using CareSync.Application.DTOs.Doctors
@using CareSync.Domain.Enums
@using CareSync.Domain.Extensions
@using CareSync.Web.Admin.Components
@using CareSync.Web.Admin.Forms
@inject IAppointmentService AppointmentService
@inject IPatientService PatientService
@inject IDoctorService DoctorService
@inject IToastService ToastService

<BaseCrudPage TDto="AppointmentDto" TCreateDto="UpsertAppointmentDto" TUpdateDto="UpsertAppointmentDto"
    TFormDto="AppointmentFormDto" @ref="_crudPage" PageTitle="Appointments"
    PageDescription="Manage patient appointments and schedules" PageIcon="fas fa-calendar-alt" EntityName="Appointment"
    TableTitle="All Appointments" TableIcon="fas fa-calendar-check" CreateButtonText="Schedule Appointment"
    EmptyStateTitle="No appointments found" EmptyStateMessage="Start by scheduling your first appointment."
    EmptyStateIcon="fas fa-calendar-plus" DeleteItemIcon="fas fa-calendar-minus" CrudService="@AppointmentService"
    UseServerFiltering="true" Filters="@_filters" CreateNewModel="@CreateNewAppointment"
    MapToUpdateModel="@MapAppointmentToModel" GetItemDisplayName="@GetAppointmentDisplayName"
    ConvertToCreateDto="@ConvertToUpsertDto" ConvertToUpdateDto="@ConvertToUpsertDto">

    <HeaderTemplate>
        <th>Patient</th>
        <th>Doctor</th>
        <th>Scheduled</th>
        <th>Duration</th>
        <th>Status</th>
        <th>Notes</th>
    </HeaderTemplate>

    <RowTemplate Context="appointment">
        <td>
            <div class="d-flex align-items-center">
                <div class="avatar-circle bg-light me-3">
                    <i class="fas fa-user"></i>
                </div>
                <div>
                    <div class="fw-bold text-primary">@appointment.PatientName</div>
                    <small class="text-muted">ID: @appointment.PatientId.ToString("N")[..8]</small>
                </div>
            </div>
        </td>
        <td>
            <div class="d-flex align-items-center">
                <i class="fas fa-user-md me-2 text-success"></i>
                <div>
                    <div class="fw-bold">@appointment.DoctorName</div>
                    <small class="text-muted">Attending Physician</small>
                </div>
            </div>
        </td>
        <td>
            <div class="fw-bold">@appointment.StartDateTime.ToString("MMM dd, yyyy")</div>
            <small class="text-muted">@appointment.StartDateTime.ToString("HH:mm")</small>
        </td>
        <td>
            <span class="cs-badge">@FormatDuration(appointment)</span>
        </td>
        <td>
            <StatusBadge Value="@appointment.Status" />
        </td>
        <td>
            @if (!string.IsNullOrWhiteSpace(appointment.Notes))
            {
                <span title="@appointment.Notes" class="text-truncate d-inline-block" style="max-width: 180px;">
                    @appointment.Notes
                </span>
            }
            else if (!string.IsNullOrWhiteSpace(appointment.CancellationReason))
            {
                <span class="text-muted" title="@appointment.CancellationReason">Cancelled:
                    @appointment.CancellationReason</span>
            }
            else
            {
                <small class="text-muted">No notes</small>
            }
        </td>
    </RowTemplate>

    <ActionsTemplate Context="appointment">
        <div class="btn-group btn-group-sm" role="group">
            @if (appointment.Status is AppointmentStatus.Scheduled or AppointmentStatus.InProgress)
            {
                <button class="btn btn-outline-success" title="Mark as Completed"
                    @onclick="() => CompleteAppointmentAsync(appointment)">
                    <i class="fas fa-check"></i>
                </button>
            }
            @if (appointment.Status == AppointmentStatus.Scheduled)
            {
                <button class="btn btn-outline-warning" title="Cancel Appointment"
                    @onclick="() => PromptCancelAsync(appointment)">
                    <i class="fas fa-ban"></i>
                </button>
            }
        </div>
    </ActionsTemplate>

    <FormTemplate Context="model">
        @if (model is AppointmentFormDto formModel)
        {
            <AppointmentForm Model="@formModel" Patients="@_patients" Doctors="@_doctors"
                AppointmentTypes="@_appointmentTypes" />
        }
    </FormTemplate>

</BaseCrudPage>

<ConfirmationDialog @ref="_cancelDialog" DialogType="ConfirmationDialogType.Warning" Title="Cancel Appointment"
    Subtitle="Provide a reason" Message="Are you sure you want to cancel this appointment?"
    ConfirmText="Yes, Cancel Appointment" ItemIcon="fas fa-calendar-times" OnConfirm="ShowCancellationReasonDialog" />

<InputDialog @ref="_cancellationReasonDialog" Type="ConfirmationDialogType.Warning" Title="Cancellation Reason"
    Message="Please provide the reason for cancelling this appointment." InputLabel="Reason for cancellation"
    Placeholder="e.g., Patient requested, scheduling conflict" ConfirmText="Cancel Appointment"
    OnConfirm="ConfirmCancelAppointment" />

@code {
    private BaseCrudPage<AppointmentDto, UpsertAppointmentDto, UpsertAppointmentDto, AppointmentFormDto>? _crudPage;
    private List<PatientDto> _patients = new();
    private List<DoctorDto> _doctors = new();
    private IReadOnlyList<string> _appointmentTypes = new[] { "Consultation", "Follow-up", "Teleconsult", "Physical Exam",
"Procedure", "Vaccination" };
    private AppointmentDto? _pendingCancellation;
    private ConfirmationDialog? _cancelDialog;
    private InputDialog? _cancellationReasonDialog;
    private IReadOnlyList<CareSync.Web.Admin.Common.Filtering.FilterDefinition> _filters =
    Array.Empty<CareSync.Web.Admin.Common.Filtering.FilterDefinition>();

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupsAsync();
    }

    private async Task LoadLookupsAsync()
    {
        try
        {
            var patientTask = PatientService.GetPatientsAsync();
            var doctorTask = DoctorService.GetDoctorsAsync();
            await Task.WhenAll(patientTask, doctorTask);
            _patients = patientTask.Result ?? new List<PatientDto>();
            _doctors = doctorTask.Result ?? new List<DoctorDto>();
            // Build filters after lookups are loaded so doctor and patient lists are available
            _filters = new[]
            {
new CareSync.Web.Admin.Common.Filtering.FilterDefinition(
key: "Status",
label: "Status",
options: CareSync.Web.Admin.Common.Filtering.EnumOptionHelper.GetOptions<AppointmentStatus>()),
new CareSync.Web.Admin.Common.Filtering.FilterDefinition(
key: "DoctorId",
label: "Doctor",
options: _doctors.Select(d => new CareSync.Web.Admin.Common.Filtering.FilterOption(d.Id.ToString(), d.DisplayName ??
"Unknown")),
propertyName: "DoctorId"),
new CareSync.Web.Admin.Common.Filtering.FilterDefinition(
key: "PatientId",
label: "Patient",
options: _patients.Select(p => new CareSync.Web.Admin.Common.Filtering.FilterOption(p.Id?.ToString() ?? string.Empty,
p.DisplayName ?? (p.Id?.ToString() ?? string.Empty))),
propertyName: "PatientId"),
new CareSync.Web.Admin.Common.Filtering.FilterDefinition(
key: "ScheduledFrom",
label: "From",
options: Array.Empty<CareSync.Web.Admin.Common.Filtering.FilterOption>(),
propertyName: "StartDateTime",
autoPopulate: false,
kind: CareSync.Web.Admin.Common.Filtering.FilterDefinition.FilterKind.Date),
new CareSync.Web.Admin.Common.Filtering.FilterDefinition(
key: "ScheduledTo",
label: "To",
options: Array.Empty<CareSync.Web.Admin.Common.Filtering.FilterOption>(),
propertyName: "StartDateTime",
autoPopulate: false,
kind: CareSync.Web.Admin.Common.Filtering.FilterDefinition.FilterKind.Date),
};
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to load supporting data: {ex.Message}");
        }
    }

    private AppointmentFormDto CreateNewAppointment() => new();

    private AppointmentFormDto MapAppointmentToModel(AppointmentDto appointment)
    {
        var model = AppointmentFormDto.FromDto(appointment);
        model.PatientIdString = appointment.PatientId.ToString();
        model.DoctorIdString = appointment.DoctorId.ToString();
        return model;
    }

    private UpsertAppointmentDto ConvertToUpsertDto(AppointmentFormDto form)
    {
        return new UpsertAppointmentDto(
        form.Id,
        form.PatientId,
        form.DoctorId,
        form.StartDateTime,
        form.DurationMinutes,
        form.AppointmentType,
        form.Notes,
        form.ReasonForVisit);
    }

    private string GetAppointmentDisplayName(AppointmentDto appointment)
    => $"{appointment.PatientName} with {appointment.DoctorName}";

    private async Task RefreshAppointmentsAsync()
    {
        if (_crudPage is not null)
        {
            await _crudPage.RefreshAsync();
        }
    }

    private async Task PromptCancelAsync(AppointmentDto appointment)
    {
        _pendingCancellation = appointment;
        if (_cancelDialog != null)
        {
            await _cancelDialog.ShowAsync();
        }
    }

    private async Task ShowCancellationReasonDialog()
    {
        if (_cancellationReasonDialog != null)
        {
            await _cancellationReasonDialog.ShowAsync();
        }
    }

    private async Task ConfirmCancelAppointment(string reason)
    {
        if (_pendingCancellation == null || string.IsNullOrWhiteSpace(reason))
        {
            return;
        }

        try
        {
            await AppointmentService.CancelAppointmentAsync(_pendingCancellation.Id, reason);
            await ToastService.ShowSuccessAsync("Appointment cancelled successfully.");
            await RefreshAppointmentsAsync();
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to cancel appointment: {ex.Message}");
        }
        finally
        {
            _pendingCancellation = null;
        }
    }

    private async Task CompleteAppointmentAsync(AppointmentDto appointment)
    {
        try
        {
            await AppointmentService.CompleteAppointmentAsync(appointment.Id, "Completed via admin UI");
            await ToastService.ShowSuccessAsync("Appointment marked as completed.");
            await RefreshAppointmentsAsync();
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to complete appointment: {ex.Message}");
        }
    }

    private static string FormatDuration(AppointmentDto appointment)
    => $"{appointment.Duration.TotalMinutes:0} min";
}
