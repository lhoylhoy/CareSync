@page "/billing"
@inject IBillingService BillingService
@inject IPatientService PatientService
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@using CareSync.Web.Admin.Shared

<PageTitle>Billing - CareSync</PageTitle>

<div class="fade-in">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="text-primary mb-0">
                <i class="fas fa-receipt me-2"></i>Billing & Invoices
            </h1>
            <p class="text-muted mb-0">Patient billing and payment management</p>
        </div>
        <button class="btn btn-primary" @onclick="ShowAddBillModal">
            <i class="fas fa-plus me-2"></i>Add New Invoice
        </button>
    </div>

    <!-- Invoices Table -->
    <div class="card">
        <div class="card-header">
            <i class="fas fa-file-invoice me-2"></i>Recent Invoices
        </div>
        <div class="card-body">
            @if (_isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner"></div>
                    <p class="mt-2 text-muted">Loading invoices...</p>
                </div>
            }
            else if (_bills?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Invoice #</th>
                                <th>Patient</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var bill in _bills?.Take(10) ?? new List<BillDto>())
                            {
                                <tr>
                                    <td>
                                        <strong class="text-primary">#@bill.BillNumber</strong>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="patient-avatar me-2">
                                                @GetInitials(bill.PatientId.ToString())
                                            </div>
                                            <div>
                                                <div class="patient-name">Patient ID: @bill.PatientId</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <strong class="amount">@bill.TotalAmount.ToString("C")</strong>
                                    </td>
                                    <td>
                                        @{
                                            var statusClass = GetStatusClass(bill.Status.ToString());
                                        }
                                        <StatusBadge Value="@bill.Status" />
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" title="View Invoice">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-warning" title="Edit Bill"
                                                @onclick="() => EditBill(bill.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" title="Delete Bill"
                                                @onclick="() => PromptDeleteBill(bill)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-success" title="Mark as Paid">
                                                <i class="fas fa-check"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-info" title="Send Reminder">
                                                <i class="fas fa-paper-plane"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if ((_bills?.Count() ?? 0) > 10)
                {
                    <div class="text-center mt-3">
                        <button class="btn btn-outline-primary">
                            Load More (@((_bills?.Count() ?? 0) - 10) remaining)
                        </button>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No invoices found</h5>
                    <p class="text-muted">No billing records found in the system.</p>
                    <button class="btn btn-primary" @onclick="ShowAddBillModal">
                        <i class="fas fa-plus me-2"></i>Create First Invoice
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Billing Modal -->
<div class="modal fade billing-modal" id="billingModal" tabindex="-1" aria-labelledby="billingModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="billingModalLabel">@(_isEditing ? "Edit Bill" : "Add New Bill")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="HandleSubmit" class="row g-3">
                    <div class="col-md-6">
                        <label for="patientId" class="form-label">Patient *</label>
                        <select class="form-select" id="patientId" @bind="_billModel.PatientIdString" required>
                            <option value="">Select Patient</option>
                            @if (_patients != null)
                            {
                                @foreach (var patient in _patients)
                                {
                                    <option value="@patient.Id.ToString()">@patient.DisplayName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="taxRate" class="form-label">Tax Rate *</label>
                        <input type="number" class="form-control" id="taxRate" step="0.01" @bind="_billModel.TaxRate"
                            required>
                    </div>
                    <div class="col-md-6">
                        <label for="discountAmount" class="form-label">Discount Amount</label>
                        <input type="number" class="form-control" id="discountAmount" step="0.01"
                            @bind="_billModel.DiscountAmount">
                    </div>
                    <div class="col-12">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="notes" rows="3" @bind="_billModel.Notes"></textarea>
                    </div>
                    <div class="col-md-6">
                        <label for="dueDate" class="form-label">Due Date *</label>
                        <input type="date" class="form-control" id="dueDate" @bind="_billModel.DueDate" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" @onclick="HandleSubmit" disabled="@_isSubmitting">
                    @if (_isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    @(_isEditing ? "Update Bill" : "Create Bill")
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .patient-avatar {
        width: 40px;
        height: 40px;
        background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
        color: var(--text-inverse);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 0.875rem;
        box-shadow: var(--shadow-medical);
    }

    .patient-name {
        font-weight: 600;
        color: var(--dark-color);
    }

    .service-type {
        font-weight: 600;
        color: var(--primary-color);
    }

    .amount {
        color: var(--secondary-color);
        font-size: 1.1rem;
    }

    .bg-pending {
        background-color: var(--warning-100) !important;
        color: var(--warning-700) !important;
    }

    .bg-paid {
        background-color: var(--success-100) !important;
        color: var(--success-600) !important;
    }

    .bg-overdue {
        background-color: var(--error-100) !important;
        color: var(--error-700) !important;
    }

    .bg-cancelled {
        background-color: var(--secondary-100) !important;
        color: var(--secondary-600) !important;
    }

    tbody tr:hover {
        background-color: rgba(0, 102, 204, 0.05);
    }
</style>

<ConfirmationDialog @ref="deleteBillDialog" DialogType="ConfirmationDialogType.Danger" Title="Delete Bill"
    Message="@UiMessages.DeleteConfirmation("invoice", _billToDelete?.BillNumber)"
    ItemName="@(_billToDelete?.BillNumber)" ItemType="Invoice" ConfirmText="Yes, Delete"
    OnConfirm="ConfirmDeleteBill" />

@code {
    private List<BillDto>? _bills;
    private List<PatientDto>? _patients;
    private BillFormDto _billModel = new();
    private bool _isLoading;
    private bool _isEditing;
    private bool _isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
        LoadBills(),
        LoadPatients()
        );
    }

    private async Task LoadBills()
    {
        try
        {
            _isLoading = true;
            _bills = await BillingService.GetBillsAsync();
        }
        catch
        {
            _bills = new List<BillDto>();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadPatients()
    {
        try
        {
            _patients = await PatientService.GetPatientsAsync();
        }
        catch
        {
            _patients = new List<PatientDto>();
        }
    }

    private async Task ShowAddBillModal()
    {
        _isEditing = false;
        _billModel = new BillFormDto();
        await JsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('billingModal')).show()");
    }

    private async Task EditBill(Guid billId)
    {
        try
        {
            var bill = await BillingService.GetBillByIdAsync(billId);
            _isEditing = true;
            _billModel = BillFormDto.FromDto(bill);
            await JsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('billingModal')).show()");
        }
        catch
        {
            await ToastService.ShowErrorAsync("Failed to load bill data. Please try again.");
        }
    }

    private async Task HandleSubmit()
    {
        if (_isSubmitting) return;

        try
        {
            _isSubmitting = true;

            if (_isEditing && _billModel.Id.HasValue)
            {
                var update = new UpdateBillDto(
                _billModel.Id.Value,
                _billModel.PatientId,
                _billModel.DueDate,
                _billModel.TaxRate,
                _billModel.DiscountAmount,
                _billModel.Notes
                );
                await BillingService.UpdateBillAsync(update);
                await ToastService.ShowSuccessAsync("Bill updated successfully.");
            }
            else
            {
                var upsertDto = _billModel.ToUpsertDto();
                await BillingService.UpsertBillAsync(upsertDto);
                await ToastService.ShowSuccessAsync("Bill created successfully.");
            }

            // Close the modal first
            await JsRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('billingModal')).hide()");

            // Refresh the bills list
            await LoadBills();

            // Force UI update
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to save bill: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-pending",
            "paid" => "bg-paid",
            "overdue" => "bg-overdue",
            "cancelled" => "bg-cancelled",
            _ => "bg-secondary"
        };
    }

    private string GetInitials(string text)
    {
        if (string.IsNullOrEmpty(text)) return "??";
        return text.Length >= 2 ? text[..2].ToUpper() : text.ToUpper();
    }

    private BillDto? _billToDelete;
    private ConfirmationDialog deleteBillDialog = null!;

    private async Task PromptDeleteBill(BillDto bill)
    {
        _billToDelete = bill;
        await deleteBillDialog.ShowAsync();
    }

    private async Task ConfirmDeleteBill()
    {
        if (_billToDelete == null) return;
        try
        {
            await BillingService.DeleteBillAsync(_billToDelete.Id);
            await LoadBills();
            await ToastService.ShowSuccessAsync(UiMessages.Deleted("Bill"));
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to delete bill: {ex.Message}");
        }
        finally
        {
            _billToDelete = null;
        }
    }
}
