@page "/billing"
@using CareSync.Application.DTOs.Billing
@using CareSync.Application.DTOs.Patients
@using CareSync.Web.Admin.Components
@using CareSync.Web.Admin.Forms
@using System.Linq
@inject IBillingService BillingService
@inject IPatientService PatientService
@inject IToastService ToastService

<BaseCrudPage
    TDto="BillDto"
    TCreateDto="UpsertBillDto"
    TUpdateDto="UpsertBillDto"
    TFormDto="BillFormDto"
    @ref="_crudPage"
    PageTitle="Billing & Invoices"
    PageDescription="Patient billing and payment management"
    PageIcon="fas fa-receipt"
    EntityName="Invoice"
    TableTitle="Recent Invoices"
    TableIcon="fas fa-file-invoice"
    CreateButtonText="Create Invoice"
    EmptyStateTitle="No invoices found"
    EmptyStateMessage="Start by creating your first invoice."
    EmptyStateIcon="fas fa-receipt"
    DeleteItemIcon="fas fa-file-invoice-dollar"
    CrudService="@BillingService"
    CreateNewModel="@CreateNewBill"
    MapToUpdateModel="@MapBillToForm"
    GetItemDisplayName="@GetBillDisplayName"
    ConvertToCreateDto="@ConvertToUpsertDto"
    ConvertToUpdateDto="@ConvertToUpsertDto"
    AllowView="true"
    OnItemViewed="HandleBillViewed">

    <HeaderTemplate>
        <th>Invoice</th>
        <th>Patient</th>
        <th>Issued</th>
        <th>Due</th>
        <th>Amounts</th>
        <th>Status</th>
    </HeaderTemplate>

    <RowTemplate Context="bill">
        <td>
            <div class="fw-semibold text-primary">@GetInvoiceNumber(bill)</div>
            <small class="text-muted">ID: @bill.Id.ToString("N")[..8]</small>
        </td>
        <td>
            <div class="d-flex align-items-center">
                <div class="avatar-circle me-3">
                    @GetInitials(GetPatientName(bill.PatientId))
                </div>
                <div>
                    <div class="fw-semibold">@GetPatientName(bill.PatientId)</div>
                    <small class="text-muted">Patient ID: @bill.PatientId.ToString("N")[..6]</small>
                </div>
            </div>
        </td>
        <td>
            <div class="fw-semibold">@bill.BillDate.ToLocalTime().ToString("MMM dd, yyyy")</div>
            <small class="text-muted">Created @bill.BillDate.ToLocalTime().ToString("HH:mm")</small>
        </td>
        <td>
            <div class="fw-semibold">@bill.DueDate.ToLocalTime().ToString("MMM dd, yyyy")</div>
            <small class="text-muted">@GetDueDescription(bill)</small>
        </td>
        <td>
            <div class="fw-semibold">@FormatCurrency(bill.TotalAmount)</div>
            <small class="text-muted">Balance: @FormatCurrency(bill.BalanceAmount)</small>
        </td>
        <td>
            <StatusBadge Value="@bill.Status" />
        </td>
    </RowTemplate>

    <FormTemplate Context="model">
        @if (model is BillFormDto formModel)
        {
            <BillForm Model="@formModel" Patients="@_patients" />
        }
    </FormTemplate>

</BaseCrudPage>

@if (_showBillDetails && _billToView is not null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-file-invoice-dollar me-2"></i>Invoice Details
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseBillDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <div class="text-muted small">Invoice</div>
                            <div class="fw-semibold">@GetInvoiceNumber(_billToView)</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Patient</div>
                            <div class="fw-semibold">@GetPatientName(_billToView.PatientId)</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Status</div>
                            <StatusBadge Value="@_billToView.Status" />
                        </div>
                    </div>

                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <div class="text-muted small">Issue Date</div>
                            <div class="fw-semibold">@_billToView.BillDate.ToLocalTime().ToString("MMM dd, yyyy")</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Due Date</div>
                            <div class="fw-semibold">@_billToView.DueDate.ToLocalTime().ToString("MMM dd, yyyy")</div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-muted small">Balance</div>
                            <div class="fw-semibold">@FormatCurrency(_billToView.BalanceAmount)</div>
                        </div>
                    </div>

                    <div class="row g-3 mb-4">
                        <div class="col-md-3">
                            <div class="text-muted small">Subtotal</div>
                            <div class="fw-semibold">@FormatCurrency(_billToView.Subtotal)</div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-muted small">Tax (@_billToView.TaxRate:P0)</div>
                            <div class="fw-semibold">@FormatCurrency(_billToView.TaxAmount)</div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-muted small">Discount</div>
                            <div class="fw-semibold">@FormatCurrency(_billToView.DiscountAmount)</div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-muted small">Total</div>
                            <div class="fw-semibold">@FormatCurrency(_billToView.TotalAmount)</div>
                        </div>
                    </div>

                    @if (_billToView.Items?.Any() == true)
                    {
                        <div class="mb-4">
                            <h6 class="text-primary"><i class="fas fa-list me-2"></i>Line Items</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Description</th>
                                            <th class="text-end">Qty</th>
                                            <th class="text-end">Unit Price</th>
                                            <th class="text-end">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in _billToView.Items)
                                        {
                                            <tr>
                                                <td>@item.Description</td>
                                                <td class="text-end">@item.Quantity</td>
                                                <td class="text-end">@FormatCurrency(item.UnitPrice)</td>
                                                <td class="text-end">@FormatCurrency(item.TotalPrice)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }

                    @if (_billToView.Payments?.Any() == true)
                    {
                        <div class="mb-4">
                            <h6 class="text-primary"><i class="fas fa-credit-card me-2"></i>Payments</h6>
                            <div class="list-group">
                                @foreach (var payment in _billToView.Payments.OrderByDescending(p => p.PaymentDate))
                                {
                                    <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                        <div>
                                            <div class="fw-semibold">@FormatCurrency(payment.Amount) â€¢ @payment.Method</div>
                                            <small class="text-muted">@payment.PaymentDate.ToLocalTime().ToString("MMM dd, yyyy")</small>
                                        </div>
                                        <StatusBadge Value="@payment.Status" />
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(_billToView.Notes))
                    {
                        <div class="mb-3">
                            <h6 class="text-primary"><i class="fas fa-sticky-note me-2"></i>Notes</h6>
                            <pre class="bg-light p-3 rounded">@_billToView.Notes</pre>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseBillDetails">
                        <i class="fas fa-times me-2"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .avatar-circle {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: var(--bs-primary-bg-subtle, #e7f1ff);
        color: var(--bs-primary, #0d6efd);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.85rem;
        font-weight: 600;
    }
</style>

@code {
    private BaseCrudPage<BillDto, UpsertBillDto, UpsertBillDto, BillFormDto>? _crudPage;
    private List<PatientDto> _patients = new();
    private BillDto? _billToView;
    private bool _showBillDetails;

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupsAsync();
    }

    private async Task LoadLookupsAsync()
    {
        try
        {
            _patients = await PatientService.GetPatientsAsync() ?? new List<PatientDto>();
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to load patients: {ex.Message}");
        }
    }

    private BillFormDto CreateNewBill() => new();

    private BillFormDto MapBillToForm(BillDto bill) => BillFormDto.FromDto(bill);

    private UpsertBillDto ConvertToUpsertDto(BillFormDto form) => form.ToUpsertDto();

    private string GetBillDisplayName(BillDto bill) => GetInvoiceNumber(bill);

    private string GetInvoiceNumber(BillDto bill)
        => string.IsNullOrWhiteSpace(bill.BillNumber) ? $"Invoice {bill.Id.ToString("N")[..6]}" : $"#{bill.BillNumber}";

    private string GetPatientName(Guid patientId)
    {
        var patient = _patients.FirstOrDefault(p => p.Id == patientId);
        return patient?.DisplayName ?? $"Patient {patientId.ToString("N")[..6]}";
    }

    private static string GetInitials(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return "--";
        var parts = value.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1)
        {
            return parts[0].Length >= 2 ? parts[0].Substring(0, 2).ToUpperInvariant() : parts[0].ToUpperInvariant();
        }

        return string.Concat(parts[0][0], parts[^1][0]).ToUpperInvariant();
    }

    private static string FormatCurrency(decimal amount) => string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C}", amount);

    private static string GetDueDescription(BillDto bill)
    {
        var today = DateTime.UtcNow.Date;
        var dueDate = bill.DueDate.Date;
        if (dueDate == today) return "Due today";
        if (dueDate > today)
        {
            var days = (dueDate - today).Days;
            return days == 1 ? "Due in 1 day" : $"Due in {days} days";
        }

        var overdue = (today - dueDate).Days;
        return overdue == 1 ? "Overdue by 1 day" : $"Overdue by {overdue} days";
    }

    private void HandleBillViewed(BillDto bill)
    {
        _billToView = bill;
        _showBillDetails = true;
    }

    private void CloseBillDetails()
    {
        _showBillDetails = false;
        _billToView = null;
    }
}
