@typeparam TDto where TDto : class
@typeparam TCreateDto where TCreateDto : class
@typeparam TUpdateDto where TUpdateDto : class
@typeparam TFormDto where TFormDto : class
@using CareSync.Web.Admin.Common.Filtering
@using System.Reflection
@inject IToastService ToastService

<div class="fade-in">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="text-primary mb-0">
                <i class="@PageIcon me-2"></i>@PageTitle
            </h1>
            <p class="text-muted mb-0">@PageDescription</p>
        </div>
    </div>

    @if (ShouldRenderToolbar)
    {
        <CrudToolbar ShowSearch="@EnableSearch" SearchPlaceholder="@SearchPlaceholder" SearchText="@SearchTerm"
            SearchTextChanged="@OnSearchTextChanged" OnSearch="@HandleSearchRequested" OnClearSearch="@HandleClearSearch"
            ShowPageSize="@EnablePagination" PageSize="@PageSize" PageSizeOptions="@PageSizeOptions"
            PageSizeChanged="@HandlePageSizeChanged" Filters="@_filterDefinitions" SelectedFilters="@SelectedFiltersView"
            OnFilterChanged="@HandleFilterChanged" AdditionalContent="@ToolbarActions" />
    }

    <!-- Main CRUD Table -->
    <CrudTableComponent TDto="TDto" Items="@VisibleItems" IsLoading="@IsLoading" TableTitle="@TableTitle"
        TableIcon="@TableIcon" LoadingMessage="@LoadingMessage" CreateButtonText="@CreateButtonText"
        EmptyStateTitle="@EmptyStateTitle" EmptyStateMessage="@EmptyStateMessage" EmptyStateIcon="@EmptyStateIcon"
        ShowActions="@ShowActions" AllowCreate="@AllowCreate" AllowEdit="@AllowEdit" AllowDelete="@AllowDelete"
        AllowView="@AllowView" ShowPagination="@EnablePagination" CurrentPage="@CurrentPage" TotalPages="@TotalPages"
        OnCreateClicked="@HandleCreate" OnEditClicked="@HandleEdit" OnDeleteClicked="@HandleDelete"
        OnViewClicked="@HandleView" OnPageChanged="@HandlePageChanged" HeaderTemplate="@HeaderTemplate"
        RowTemplate="@RowTemplate" ActionsTemplate="@ActionsTemplate" />

    <!-- CRUD Modal -->
    <CrudModalComponent TDto="TFormDto" @ref="CrudModal" ModalId="@($"{EntityName.ToLower()}CrudModal")"
        IsEditing="@IsEditing" IsLoading="@IsModalLoading" IsProcessing="@IsProcessing" CurrentModel="@CurrentModel"
        ValidationMessages="@ValidationMessages" CreateTitle="@($"Create New {EntityName}")"
        EditTitle="@($"Edit {EntityName}")" CreateIcon="@CreateIcon" EditIcon="@EditIcon"
        CreateSubmitText="@CreateSubmitText" EditSubmitText="@EditSubmitText" FormTemplate="@FormTemplate"
        OnSubmit="@HandleSubmit" />

    <!-- Delete Confirmation Dialog -->
    <ConfirmationDialog @ref="DeleteConfirmDialog" Title="@($"Delete {EntityName}")"
        Message="@($"Are you sure you want to delete {ItemToDeleteName}? This action cannot be undone.")"
        ConfirmText="Delete" ItemIcon="@DeleteItemIcon" OnConfirm="@HandleDeleteConfirm" />
</div>

@code {

    // Page Configuration
    [Parameter] public string PageTitle { get; set; } = "Items";
    [Parameter] public string PageDescription { get; set; } = "Manage your items";
    [Parameter] public string PageIcon { get; set; } = "fas fa-list";
    [Parameter] public string EntityName { get; set; } = "Item";

    // Table Configuration
    [Parameter] public string TableTitle { get; set; } = "Items";
    [Parameter] public string TableIcon { get; set; } = "fas fa-table";
    [Parameter] public string LoadingMessage { get; set; } = "Loading items...";
    [Parameter] public string CreateButtonText { get; set; } = "Add New";
    [Parameter] public string EmptyStateTitle { get; set; } = "No items found";
    [Parameter] public string EmptyStateMessage { get; set; } = "Start by creating your first item.";
    [Parameter] public string EmptyStateIcon { get; set; } = "fas fa-inbox";

    // Action Controls
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool AllowCreate { get; set; } = true;
    [Parameter] public bool AllowEdit { get; set; } = true;
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public bool AllowView { get; set; }

    // Toolbar & Data Operations
    [Parameter] public bool EnableToolbar { get; set; } = true;
    [Parameter] public bool EnableSearch { get; set; } = true;
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public Func<TDto, IEnumerable<string>>? SearchValueSelector { get; set; }
    [Parameter] public bool EnablePagination { get; set; } = true;
    [Parameter] public int DefaultPageSize { get; set; } = CareSync.Application.Common.PagingDefaults.DefaultPageSize;
    [Parameter] public IReadOnlyList<int> PageSizeOptions { get; set; } = new[] { 10, 25, 50 };
    [Parameter] public IEnumerable<FilterDefinition>? Filters { get; set; }
    [Parameter] public RenderFragment? ToolbarActions { get; set; }
    [Parameter] public bool UseServerFiltering { get; set; }

    // Modal Configuration
    [Parameter] public string CreateIcon { get; set; } = "fas fa-plus";
    [Parameter] public string EditIcon { get; set; } = "fas fa-edit";
    [Parameter] public string CreateSubmitText { get; set; } = "Create";
    [Parameter] public string EditSubmitText { get; set; } = "Update";
    [Parameter] public string DeleteItemIcon { get; set; } = "fas fa-file";

    // Templates
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }
    [Parameter] public RenderFragment<TDto>? RowTemplate { get; set; }
    [Parameter] public RenderFragment<TFormDto>? FormTemplate { get; set; }
    [Parameter] public RenderFragment<TDto>? ActionsTemplate { get; set; }

    // Service
    [Parameter] public ICrudService<TDto, TCreateDto, TUpdateDto>? CrudService { get; set; }

    // Event Callbacks
    [Parameter] public EventCallback<TDto> OnItemCreated { get; set; }
    [Parameter] public EventCallback<TDto> OnItemUpdated { get; set; }
    [Parameter] public EventCallback<TDto> OnItemDeleted { get; set; }
    [Parameter] public EventCallback<TDto> OnItemViewed { get; set; }
    [Parameter] public Func<TFormDto>? CreateNewModel { get; set; }
    [Parameter] public Func<TDto, TFormDto>? MapToUpdateModel { get; set; }
    [Parameter] public Func<TDto, string>? GetItemDisplayName { get; set; }
    [Parameter] public Func<TFormDto, TCreateDto>? ConvertToCreateDto { get; set; }
    [Parameter] public Func<TFormDto, TUpdateDto>? ConvertToUpdateDto { get; set; }

    // State
    private List<TDto> Items = new();
    private IReadOnlyList<TDto> VisibleItems = Array.Empty<TDto>();
    private bool IsLoading;
    private readonly bool IsModalLoading = false;
    private bool IsProcessing;
    private bool IsEditing;
    private TFormDto? CurrentModel;
    private TDto? CurrentItem;
    private readonly List<string> ValidationMessages = new();
    private string ItemToDeleteName = string.Empty;

    // Query State
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize;
    private string SearchTerm = string.Empty;
    private int TotalCount;
    private readonly Dictionary<string, string?> _selectedFilters = new(StringComparer.OrdinalIgnoreCase);
    private IReadOnlyDictionary<string, string?> SelectedFiltersView => _selectedFilters;
    private IReadOnlyList<FilterDefinition> _filterDefinitions = Array.Empty<FilterDefinition>();
    private readonly Dictionary<string, PropertyInfo?> _filterPropertyCache = new(StringComparer.OrdinalIgnoreCase);

    private bool ShouldRenderToolbar => EnableToolbar && (EnableSearch || EnablePagination || _filterDefinitions.Count > 0
    || ToolbarActions != null);

    // Component References
    private CrudModalComponent<TFormDto>? CrudModal;
    private ConfirmationDialog? DeleteConfirmDialog;

    protected override async Task OnInitializedAsync()
    {
        PageSize = Math.Min(DetermineInitialPageSize(), CareSync.Application.Common.PagingDefaults.MaxPageSize);
        CloneFilters();
        await LoadItems(resetPagination: true);
    }

    protected override void OnParametersSet()
    {
        PageSizeOptions ??= Array.Empty<int>();
        CloneFilters();
    }

    private void CloneFilters()
    {
        var cloned = Filters?.Select(f => f.Clone()).ToList();
        _filterDefinitions = cloned is { Count: > 0 } ? cloned : Array.Empty<FilterDefinition>();
        _filterPropertyCache.Clear();
        TrimStaleFilters();
    }

    private void TrimStaleFilters()
    {
        if (_filterDefinitions.Count == 0)
        {
            _selectedFilters.Clear();
            return;
        }

        if (_selectedFilters.Count == 0) return;

        var validKeys = _filterDefinitions
        .Select(f => f.Key)
        .ToHashSet(StringComparer.OrdinalIgnoreCase);

        foreach (var key in _selectedFilters.Keys.ToList())
        {
            if (!validKeys.Contains(key))
            {
                _selectedFilters.Remove(key);
            }
        }
    }

    private int DetermineInitialPageSize()
    {
        if (DefaultPageSize > 0) return DefaultPageSize;
        if (PageSizeOptions?.Count > 0) return PageSizeOptions[0];
        return CareSync.Application.Common.PagingDefaults.DefaultPageSize;
    }

    private async Task LoadItems(bool resetPagination = false)
    {
        if (CrudService == null) return;

        IsLoading = true;
        StateHasChanged();

        try
        {
            if (UseServerFiltering)
            {
                if (PageSize <= 0)
                {
                    PageSize = Math.Min(DetermineInitialPageSize(), CareSync.Application.Common.PagingDefaults.MaxPageSize);
                }

                if (resetPagination)
                {
                    CurrentPage = 1;
                }

                var response = await CrudService.GetPagedAsync(
                CurrentPage,
                PageSize,
                EnableSearch ? SearchTerm : null,
                _selectedFilters);

                if (response.Success && response.Data != null)
                {
                    var payload = response.Data;
                    TotalCount = payload.TotalCount;
                    TotalPages = Math.Max(payload.TotalPages, 1);
                    CurrentPage = Math.Clamp(payload.PageNumber > 0 ? payload.PageNumber : CurrentPage, 1, TotalPages);
                    VisibleItems = (payload.Items ?? Array.Empty<TDto>()).ToList();
                }
                else
                {
                    VisibleItems = Array.Empty<TDto>();
                    TotalCount = 0;
                    TotalPages = 1;
                    await ToastService.ShowErrorAsync(response.Message ?? "Failed to load items");
                }

                return;
            }

            var allResponse = await CrudService.GetAllAsync();
            if (allResponse.Success && allResponse.Data != null)
            {
                Items = allResponse.Data.ToList();

                if (PageSize <= 0)
                {
                    PageSize = DetermineInitialPageSize();
                }

                if (resetPagination)
                {
                    CurrentPage = 1;
                }

                PopulateAutoFilters();
                ApplyDataTransformations(resetPagination);
            }
            else
            {
                await ToastService.ShowErrorAsync(allResponse.Message ?? "Failed to load items");
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Error loading items: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void PopulateAutoFilters()
    {
        if (UseServerFiltering || _filterDefinitions.Count == 0) return;

        foreach (var filter in _filterDefinitions.Where(f => f.AutoPopulate))
        {
            var options = Items
            .Select(item => GetPropertyStringValue(item, filter.PropertyName))
            .Where(value => !string.IsNullOrWhiteSpace(value))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(value => value)
            .Select(value => new FilterOption(value!, value!))
            .ToList();

            filter.ReplaceOptions(options);

            if (_selectedFilters.TryGetValue(filter.Key, out var selectedValue) && selectedValue != null)
            {
                var optionValues = options.Select(o => o.Value).ToHashSet(StringComparer.OrdinalIgnoreCase);
                if (!optionValues.Contains(selectedValue))
                {
                    _selectedFilters.Remove(filter.Key);
                }
            }
        }
    }

    private void ApplyDataTransformations(bool resetPagination = false)
    {
        if (UseServerFiltering)
        {
            return;
        }

        IEnumerable<TDto> query = Items;

        if (EnableSearch && !string.IsNullOrWhiteSpace(SearchTerm))
        {
            var normalized = SearchTerm.Trim();
            query = query.Where(item => MatchesSearch(item, normalized));
        }

        if (_selectedFilters.Count > 0)
        {
            foreach (var filter in _selectedFilters.Where(kvp => !string.IsNullOrWhiteSpace(kvp.Value)))
            {
                var definition = _filterDefinitions.FirstOrDefault(f => f.Key.Equals(filter.Key, StringComparison.OrdinalIgnoreCase));
                if (definition == null) continue;

                query = query.Where(item => MatchesFilter(item, definition, filter.Value!));
            }
        }

        var filteredItems = query.ToList();
        TotalCount = filteredItems.Count;

        if (!EnablePagination || PageSize <= 0)
        {
            TotalPages = 1;
            CurrentPage = 1;
            VisibleItems = filteredItems;
            StateHasChanged();
            return;
        }

        if (resetPagination)
        {
            CurrentPage = 1;
        }

        var totalPages = (int)Math.Ceiling(filteredItems.Count / (double)PageSize);
        TotalPages = Math.Max(totalPages, 1);
        CurrentPage = Math.Clamp(CurrentPage, 1, TotalPages);

        var skip = (CurrentPage - 1) * PageSize;
        VisibleItems = filteredItems.Skip(skip).Take(PageSize).ToList();
        StateHasChanged();
    }

    private bool MatchesSearch(TDto item, string term)
    {
        if (SearchValueSelector != null)
        {
            foreach (var value in SearchValueSelector(item) ?? Array.Empty<string>())
            {
                if (string.IsNullOrWhiteSpace(value)) continue;
                if (value.Contains(term, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }

            return false;
        }

        var candidate = item?.ToString();
        return !string.IsNullOrWhiteSpace(candidate) && candidate.Contains(term, StringComparison.OrdinalIgnoreCase);
    }

    private bool MatchesFilter(TDto item, FilterDefinition definition, string value)
    {
        var propertyValue = GetPropertyStringValue(item, definition.PropertyName);
        if (propertyValue == null) return false;
        return string.Equals(propertyValue, value, StringComparison.OrdinalIgnoreCase);
    }

    private string? GetPropertyStringValue(TDto item, string propertyName)
    {
        if (string.IsNullOrWhiteSpace(propertyName))
        {
            return item?.ToString();
        }

        if (!_filterPropertyCache.TryGetValue(propertyName, out var propertyInfo))
        {
            propertyInfo = typeof(TDto).GetProperty(propertyName, BindingFlags.Public | BindingFlags.Instance |
            BindingFlags.IgnoreCase);

            _filterPropertyCache[propertyName] = propertyInfo;
        }

        var rawValue = propertyInfo?.GetValue(item);
        if (rawValue == null) return null;

        return rawValue switch
        {
            string str => str,
            Enum @enum => @enum.ToString(),
            _ => rawValue.ToString()
        };
    }

    private async Task HandleSearchRequested()
    {
        if (UseServerFiltering)
        {
            await LoadItems(resetPagination: true);
        }
        else
        {
            ApplyDataTransformations(resetPagination: true);
        }
    }

    private async Task HandleClearSearch()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            return;
        }

        SearchTerm = string.Empty;

        if (UseServerFiltering)
        {
            await LoadItems(resetPagination: true);
        }
        else
        {
            ApplyDataTransformations(resetPagination: true);
        }
    }

    private Task OnSearchTextChanged(string value)
    {
        SearchTerm = value ?? string.Empty;
        return Task.CompletedTask;
    }

    private async Task HandlePageSizeChanged(int size)
    {
        if (size <= 0)
        {
            size = DetermineInitialPageSize();
        }

        if (size == PageSize)
        {
            return;
        }

        PageSize = Math.Min(size, CareSync.Application.Common.PagingDefaults.MaxPageSize);

        if (UseServerFiltering)
        {
            await LoadItems(resetPagination: true);
        }
        else
        {
            ApplyDataTransformations(resetPagination: true);
        }
    }

    private async Task HandleFilterChanged(FilterChangedEventArgs args)
    {
        if (args == null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(args.Value))
        {
            _selectedFilters.Remove(args.Key);
        }
        else
        {
            _selectedFilters[args.Key] = args.Value;
        }

        if (UseServerFiltering)
        {
            await LoadItems(resetPagination: true);
        }
        else
        {
            ApplyDataTransformations(resetPagination: true);
        }
    }

    private async Task HandlePageChanged(int page)
    {
        if (!EnablePagination)
        {
            return;
        }

        CurrentPage = Math.Max(1, page);

        if (UseServerFiltering)
        {
            await LoadItems();
        }
        else
        {
            ApplyDataTransformations();
        }
    }

    private async Task HandleCreate()
    {
        if (CreateNewModel == null) return;

        IsEditing = false;
        CurrentModel = CreateNewModel();
        ValidationMessages.Clear();

        if (CrudModal != null)
            await CrudModal.ShowAsync();
    }

    private async Task HandleEdit(TDto item)
    {
        if (MapToUpdateModel == null) return;

        IsEditing = true;
        CurrentItem = item;
        CurrentModel = MapToUpdateModel(item);
        ValidationMessages.Clear();

        if (CrudModal != null)
            await CrudModal.ShowAsync();
    }

    private async Task HandleDelete(TDto item)
    {
        CurrentItem = item;
        ItemToDeleteName = GetItemDisplayName?.Invoke(item) ?? "Unknown";

        if (DeleteConfirmDialog != null)
            await DeleteConfirmDialog.ShowAsync();
    }

    private async Task HandleView(TDto item)
    {
        await OnItemViewed.InvokeAsync(item);
    }

    private async Task HandleSubmit(TFormDto model)
    {
        if (CrudService == null) return;

        IsProcessing = true;
        ValidationMessages.Clear();
        StateHasChanged();

        try
        {
            if (IsEditing)
            {
                if (CurrentItem != null && ConvertToUpdateDto != null)
                {
                    var updateModel = ConvertToUpdateDto(model);

                    // Get the ID from the current item - assuming all DTOs have an Id property
                    var idProperty = typeof(TDto).GetProperty("Id");
                    if (idProperty != null && idProperty.GetValue(CurrentItem) is Guid id)
                    {
                        var response = await CrudService.UpdateAsync(id, updateModel);
                        if (response.Success && response.Data != null)
                        {
                            await ToastService.ShowSuccessAsync(response.Message ?? $"{EntityName} updated successfully");
                            await OnItemUpdated.InvokeAsync(response.Data);
                            await LoadItems(resetPagination: true);

                            if (CrudModal != null)
                                await CrudModal.HideAsync();
                        }
                        else
                        {
                            ValidationMessages.Add(response.Message ?? "Failed to update item");
                        }
                    }
                }
            }
            else
            {
                if (ConvertToCreateDto != null)
                {
                    var createModel = ConvertToCreateDto(model);
                    var response = await CrudService.CreateAsync(createModel);
                    if (response.Success && response.Data != null)
                    {
                        await ToastService.ShowSuccessAsync(response.Message ?? $"{EntityName} created successfully");
                        await OnItemCreated.InvokeAsync(response.Data);
                        await LoadItems(resetPagination: true);

                        if (CrudModal != null)
                            await CrudModal.HideAsync();
                    }
                    else
                    {
                        ValidationMessages.Add(response.Message ?? "Failed to create item");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ValidationMessages.Add($"An error occurred: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    public async Task RefreshAsync()
    {
        await LoadItems();
    }

    private async Task HandleDeleteConfirm()
    {
        if (CrudService == null || CurrentItem == null) return;

        IsProcessing = true;
        StateHasChanged();

        try
        {
            // Get the ID from the current item - assuming all DTOs have an Id property
            var idProperty = typeof(TDto).GetProperty("Id");
            if (idProperty != null && idProperty.GetValue(CurrentItem) is Guid id)
            {
                var response = await CrudService.DeleteAsync(id);
                if (response.Success)
                {
                    await ToastService.ShowSuccessAsync(response.Message ?? $"{EntityName} deleted successfully");
                    await OnItemDeleted.InvokeAsync(CurrentItem);
                    await LoadItems(resetPagination: true);
                }
                else
                {
                    await ToastService.ShowErrorAsync(response.Message ?? "Failed to delete item");
                }
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Error deleting item: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
            if (DeleteConfirmDialog != null)
                await DeleteConfirmDialog.HideAsync();
        }
    }

}
